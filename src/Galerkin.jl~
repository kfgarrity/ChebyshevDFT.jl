module Galerkin
using Polynomials
using SpecialPolynomials
using Base.Threads

function get_cheb_bc(N)

    B = basis.(Chebyshev{BigFloat}, 0:N);

    B2 = []
    for n = 3:N+1
        if mod(n,2) == 0
            push!(B2, B[n] - B[2])
        else
            push!(B2, B[n] - B[1])
        end
    end

    B3 = []
    for b in B2
        push!(B3, b / sqrt(integrate(b^2, -1, 1)))
    end
    return B3
    
end


function overlap(B)

    S = zeros(length(B), length(B))
    for (c1, b1) in enumerate(B)
        for (c2, b2) in enumerate(B)
            S[c1,c2] = integrate(Polynomial(b1*b2), -1,1)
        end
    end

    return S

end

function testS(B, n)

    return integrate(Polynomial(B[n]*B[n]), -1,1)

end

function D1(B)

    d = zeros(length(B), length(B))
    @threads for c1 in 1:length(B)
        println("d1 $c1")
        b1 = B[c1]
        for (c2, b2) in enumerate(B)
            d[c1,c2] = integrate(Polynomial(b1*derivative(b2)), -1,1)
        end
    end

    return d

end

function D2(B)

    d = zeros(length(B), length(B))
    @threads for c1 in 1:length(B)
        println("d2 $c1")
        b1 = B[c1]
#    @threads for (c1, b1) in enumerate(B)
#        println("d2 $c1")
        for (c2, b2) in enumerate(B)
            d[c1,c2] = integrate(Polynomial(b1*derivative(derivative(b2))), -1,1)
        end
    end

    return d

end


function f(V, B)

    d = zeros(length(B), length(B))
    for (c1, b1) in enumerate(B)
        for (c2, b2) in enumerate(B)
            d[c1,c2] = integrate(V.*Polynomial(b1*b2), -1,1)
        end
    end

    return d

end





end #end module
